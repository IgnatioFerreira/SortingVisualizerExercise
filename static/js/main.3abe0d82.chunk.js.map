{"version":3,"sources":["logo.svg","SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","bars","index","getElementById","offsetHeight","getCurrentLengths","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","temp","swapped","bar1","bar2","colorswap","value","console","log","className","id","onClick","resetArrayAnimation","bubbleSort","map","idx","React","Component","min","max","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3abe0d82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\n\r\nexport function bubbleSortAnimations(array) {\r\n    const animations = [];\r\n\r\n    \r\n    for(let i = 0; i  < array.length; i++) {\r\n        for(let j = i + 1; j < array.length; j++) {\r\n            if(array[i] > array[j]){\r\n                let temp = array[j];\r\n                array[j] = array[i];\r\n                array[i] = temp;\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport {\r\n  getMergeSortAnimations,\r\n  bubbleSortAnimations,\r\n} from \"../SortingAlgorithms/sortingAlgorithms.js\";\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst NUMBER_OF_ARRAY_BARS = 25;\r\nconst PRIMARY_COLOR = \"#f49f1c\";\r\nconst SECONDARY_COLOR = \"f49f1c\";\r\n//TODO use quickmath to set the sorted time accoring to the blabla so that it is alway a constant maybe 5 secs\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 675));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  getCurrentLengths() {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const bars = [];\r\n    for (let index = 0; index < arrayBars.length; index++) {\r\n      bars.push(document.getElementById(`${index}`).offsetHeight);\r\n    }\r\n    return bars;\r\n  }\r\n\r\n  mergeSort() {\r\n    const mergespeed = 10;\r\n    const animations = getMergeSortAnimations(this.getCurrentLengths());\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS * mergespeed) ;\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS * mergespeed);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {}\r\n  heapSort() {}\r\n  bubbleSort() {\r\n    const animations = [];\r\n    let bars = this.getCurrentLengths();\r\n\r\n    let i, j, temp, swapped;\r\n    for (i = 0; i < bars.length; i++) {\r\n      swapped = false;\r\n      for (j = 0; j < bars.length - i - 1; j++) {\r\n        if (bars[j] > bars[j + 1]) {\r\n          temp = bars[j];\r\n          bars[j] = bars[j + 1];\r\n          bars[j + 1] = temp;\r\n          swapped = true;\r\n          animations.push([j, j + 1, true]);\r\n          animations.push([j, j + 1, true]);\r\n        }\r\n        animations.push([j, j + 1, false]);\r\n        animations.push([j, j + 1, false]);\r\n      }\r\n      if (!swapped) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // console.log(animations);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bubblespeed = 50;\r\n\r\n      let bar1 = document.getElementById(`${animations[i][0]}`).style;\r\n      let bar2 = document.getElementById(`${animations[i][1]}`).style;\r\n\r\n      const colorswap = i % 2 === 0;\r\n      setTimeout(() => {\r\n        if (animations[i][2] && colorswap) {\r\n          let temp = bar1.height;\r\n          bar1.height = bar2.height;\r\n          bar2.height = temp;\r\n          bar1.backgroundColor = SECONDARY_COLOR;\r\n          bar2.backgroundColor = SECONDARY_COLOR;\r\n        } else if ((!animations[i][2]) && colorswap) {\r\n          bar1.backgroundColor = \"green\";\r\n          bar2.backgroundColor = \"green\";\r\n        } else {\r\n          bar1.backgroundColor = PRIMARY_COLOR;\r\n          bar2.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n      }, i * ANIMATION_SPEED_MS * bubblespeed);\r\n    }\r\n  }\r\n  resetArrayAnimation() {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const value = randomIntFromInterval(5, 675);\r\n      setTimeout(() => {\r\n        const bar = arrayBars[i].style;\r\n        bar.height = `${value}px`;\r\n      }, i * ANIMATION_SPEED_MS * 10);\r\n    }\r\n\r\n    //TODO randomize the elements that are already present\r\n    // for(let i = 0; i < animations.length; i++){\r\n\r\n    // }\r\n  }\r\n\r\n  testSort() {\r\n    console.log(\"alalalla\");\r\n    for (let i = 0; i < 20; i++) {\r\n      let bar1 = document.getElementById(Math.floor(i / 2)).style;\r\n      setTimeout(() => {\r\n        if (i % 2 === 0) {\r\n          bar1.backgroundColor = SECONDARY_COLOR;\r\n        } else {\r\n          bar1.backgroundColor = \"blue\";\r\n        }\r\n      }, i * ANIMATION_SPEED_MS * 300);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"body\">\r\n        <div className=\"navbar\">\r\n          <div id=\"buttons\">\r\n            <button id=\"generate\" onClick={() => this.resetArrayAnimation()}>\r\n              Generate New Array\r\n            </button>\r\n            {/* <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n            <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n            <button onClick={() => this.heapSort()}>Heap Sort</button> */}\r\n            <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            {/* <button onClick={() => this.testSort()} id=\"generate\"> Test</button>\r\n            <button> Hi! This is a work in progress!</button> */}\r\n          </div>\r\n        </div>\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              id={idx}\r\n              key={idx}\r\n              style={{\r\n                height: `${value}px`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n//TODO disable generate new array button while sorting\r\n\r\n//   5\r\n//  / \\\r\n// 4   6\r\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}