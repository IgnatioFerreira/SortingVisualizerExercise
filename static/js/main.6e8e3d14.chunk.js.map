{"version":3,"sources":["logo.svg","SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","bubbleSortAnimations","temp","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","bars","index","getElementById","offsetHeight","getCurrentLengths","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","swapped","bar1","bar2","console","log","value","sort","className","id","onClick","resetArrayAnimation","mergeSort","quickSort","heapSort","bubbleSort","testSort","map","idx","React","Component","min","max","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6e8e3d14.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\n\r\nexport function bubbleSortAnimations(array) {\r\n    const animations = [];\r\n\r\n    \r\n    for(let i = 0; i  < array.length; i++) {\r\n        for(let j = i + 1; j < array.length; j++) {\r\n            if(array[i] > array[j]){\r\n                let temp = array[j];\r\n                array[j] = array[i];\r\n                array[i] = temp;\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}","import React from 'react'\r\nimport './SortingVisualizer.css';\r\nimport { getMergeSortAnimations, bubbleSortAnimations } from \"../SortingAlgorithms/sortingAlgorithms.js\";\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst NUMBER_OF_ARRAY_BARS = 50;\r\nconst PRIMARY_COLOR = 'rgba(255, 128, 43, 0.748)';\r\nconst SECONDARY_COLOR = 'red';\r\n//TODO use quickmath to set the sorted time accoring to the blabla so that it is alway a constant maybe 5 secs\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 675));\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    getCurrentLengths() {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const bars = [];\r\n        for (let index = 0; index < arrayBars.length; index++) {\r\n            bars.push(document.getElementById(`${index}`).offsetHeight);\r\n\r\n        }\r\n        return bars;\r\n    }\r\n\r\n    mergeSort() {\r\n\r\n        const animations = getMergeSortAnimations(this.getCurrentLengths());\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() { }\r\n    heapSort() { }\r\n    bubbleSort() {\r\n        const animations = [];\r\n        let bars = this.getCurrentLengths();\r\n        \r\n        let i, j, temp, swapped;\r\n        for (i = 0; i < bars.length; i++) {\r\n            swapped = false;\r\n            for(j = 0; j < bars.length - i - 1; j++){\r\n                if(bars[j] > bars[j+1]){\r\n                    temp = bars[j];\r\n                    bars[j] = bars[j+1];\r\n                    bars[j+1] = temp;\r\n                    swapped = true;\r\n                    animations.push([j, j+1,true]);\r\n                }\r\n                animations.push([j, j+1,false]);\r\n                \r\n            }\r\n            if(!swapped){\r\n                break;\r\n            }\r\n        }\r\n\r\n        // console.log(animations);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            let bar1 = document.getElementById(`${animations[i][0]}`).style;\r\n            let bar2 = document.getElementById(`${animations[i][1]}`).style;\r\n            \r\n\r\n            if(animations[i][2]){\r\n                console.log(animations[i][2]);\r\n                setTimeout(() => {\r\n                    let temp = bar1.height;\r\n                    bar1.height = bar2.height;\r\n                    bar2.height = temp;\r\n                }, i * ANIMATION_SPEED_MS * 5);\r\n            } else{\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n    resetArrayAnimation() {\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n            const value = randomIntFromInterval(5, 675);\r\n            setTimeout(() => {\r\n                const bar = arrayBars[i].style;\r\n                bar.height = `${value}px`;\r\n\r\n            }, i * ANIMATION_SPEED_MS * 2);\r\n        }\r\n\r\n\r\n        //TODO randomize the elements that are already present\r\n        // for(let i = 0; i < animations.length; i++){\r\n\r\n        // }\r\n\r\n    }\r\n\r\n    testSort() {\r\n        for (let i = 0; i < 1; i++) {\r\n            const array = [];\r\n            for (let k = 0; k < NUMBER_OF_ARRAY_BARS; k++) {\r\n                array.push(randomIntFromInterval(5, 675));\r\n            }\r\n            let sort = bubbleSortAnimations(array);\r\n            console.log(sort);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"navbar\">\r\n                    <div id=\"buttons\">\r\n                        <button id=\"generate\" onClick={() => this.resetArrayAnimation()}>Generate New Array</button>\r\n                        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                        <button onClick={() => this.testSort()}> Test</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            id={idx}\r\n                            key={idx}\r\n                            style={{\r\n                                height: `${value}px`\r\n                            }}\r\n\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n//TODO disable generate new array button while sorting\r\n\r\n\r\n\r\n//   5\r\n//  / \\ \r\n// 4   6","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}